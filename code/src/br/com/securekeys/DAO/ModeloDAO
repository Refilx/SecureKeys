//package br.com.securekeys.DAO;



import factory.ConnectionFactory;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

//public class ModeloDAO {

    /*
    CRUD
    c: CREATE OK
    r: READ   OK
    u: UPDATE OK
    d: DELETE


    //Metodo save executará o comando INSERT no banco de dados
    public void save(Contato contato) {

        String sql = "INSERT INTO contatos(nome, idade, datacadastro) VALUES (?, ?, ?)";

        Connection conn = null;

        PreparedStatement pstm = null;

        try{
            //Criar uma conexão com o banco de dados
            conn = ConnectionFactory.createConnectionToMySQL();

            // Criamos uma PreparedStatement para executar uma query
            pstm = conn.prepareStatement(sql);

            //Adicionar os valores que são esperados pela Query
            pstm.setString(1, contato.getNome());
            pstm.setInt(2, contato.getIdade());
            pstm.setDate(3, new Date(contato.getDataCadastro().getTime()));

            //Executar a query
            pstm.execute();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            //Fechar as conexões
            try{
                if(pstm!=null) {
                    pstm.close();
                }

                if(conn!=null) {
                    conn.close();
                }
            }catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    //Metodo que executa o comando SELECT no banco de dados
    public List<Contato> getContatos(){

        String sql = "SELECT * FROM  contatos";

        List<Contato> listaContatos = new ArrayList<Contato>();

        Connection conn = null;
        PreparedStatement pstm = null;

        // Classe que vai recuperar os dados do banco.  *** SELECT ***
        ResultSet rset = null;

        try{
            conn = ConnectionFactory.createConnectionToMySQL();

            pstm = conn.prepareStatement(sql);

            rset = pstm.executeQuery();

            while(rset.next()) {
                Contato contato = new Contato();

                //Recupera o id
                contato.setId(rset.getInt("id"));
                //Recupera o nome
                contato.setNome(rset.getString("nome"));
                //Recupera a idade
                contato.setIdade(rset.getInt("idade"));
                //Recupera a data de cadastro
                contato.setDataCadastro(rset.getDate("datacadastro"));

                //Adiciona o contato com todos os dados registrados à lista de contatos
                listaContatos.add(contato);

            }
        }catch(Exception e){
            e.printStackTrace();
        }finally{

            //Fechar as conexões
            try{
                if(rset!=null) {
                    rset.close();
                }

                if(pstm!=null) {
                    pstm.close();
                }

                if(conn!=null) {
                    conn.close();
                }

            }catch(Exception e) {
                e.printStackTrace();
            }
        }

        return listaContatos;
    }

    //Metodo que executa o comando UPDATE no banco de dados
    public void update(Contato contato){
        String sql = "UPDATE contatos SET nome = ?, idade = ?, datacadastro = ?"+
                "WHERE id = ?";

        Connection conn = null;
        PreparedStatement pstm =null;

        try{
            //Cria a conexão com o banco
            conn = ConnectionFactory.createConnectionToMySQL();

            //Cria a classe para executar a Query
            pstm = conn.prepareStatement(sql);

            //Adiciona os valores para atualizar
            pstm.setString(1, contato.getNome());
            pstm.setInt(2, contato.getIdade());
            pstm.setDate(3, new Date(contato.getDataCadastro().getTime()));

            // Qual o ID do registro que deseja atualizar?
            pstm.setInt(4, contato.getId());

            //Executa a query
            pstm.execute();

        }catch(Exception e){
            e.printStackTrace();
        }finally{

            //Fechar as conexões
            try{
                if(pstm!=null) {
                    pstm.close();
                }

                if(conn!=null) {
                    conn.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }

    //Método que executa o comando DELETE no banco de dados
    public void deleteByID(int id){

        String sql = "DELETE FROM contatos WHERE id = ?";

        Connection conn = null;

        PreparedStatement pstm = null;

        try{
            conn = ConnectionFactory.createConnectionToMySQL();

            pstm = conn.prepareStatement(sql);

            //Passando o valor de parâmetro do método para a string sql
            pstm.setInt(1,id);

            pstm.execute();

        }catch(Exception e){
            e.printStackTrace();
        }finally{

            try{
                if(pstm!=null) {
                    pstm.close();
                }

                if(conn!=null) {
                    conn.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
}
/*

