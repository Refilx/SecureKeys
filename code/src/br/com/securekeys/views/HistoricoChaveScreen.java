/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package br.com.securekeys.views;

import br.com.securekeys.DAO.ChaveDAO;
import br.com.securekeys.DAO.HistoricoDAO;
import br.com.securekeys.model.Historico;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author Adimael
 */
public class HistoricoChaveScreen extends javax.swing.JInternalFrame {

    /**
     * Creates new form AddUserScreen
     */
    public HistoricoChaveScreen() {
        initComponents();
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, null, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 70, 214)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        jPanel2 = new JPanel( new BorderLayout());
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();

        setClosable(true);
        setMinimumSize(new Dimension(1795, 701));
        setPreferredSize(new Dimension(1795, 201));

        jPanel1.setBackground(new Color(255, 255, 255));

        jLabel1.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("Cadastrar nova Chave");

        jPanel2.setBackground(new Color(255, 255, 255));

        /**
         * Foi necessesário intanciar a lista de histórico do banco de dados antes da tabela
         * para poder definir o tamanho da tabela de arordo com a quantidade de registros
         */
        HistoricoDAO historicoDAO = new HistoricoDAO();

        final Historico[] historicos = historicoDAO.getHistorico().toArray(new Historico[0]);

        jTable1 = tableConfig(jTable1, historicos);

        //Botão para exportar os dados da tabela
        JButton btnExport = new JButton();

        // Caso o usuário clique no botão o sistema exportará os dados para uma planilha excel
        class MyListener implements ActionListener {
            public void actionPerformed(ActionEvent e) {
                if (e.getSource() == btnExport) {
                    new JTableToExcel(jTable1);
                }
            }
        }

        //Tentar adicionar um botão para Exportar os dados
        btnExport.setText("Export to Excel");
        btnExport.setBorder(null);
        btnExport.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnExport.addActionListener(new MyListener());
        btnExport.setIcon( new javax.swing.ImageIcon(getClass().getClassLoader().getResource("br/com/securekeys/icons/excel.png")));

        //Setando os valores de cada coluna
        refresh(jTable1, historicos);

        /**
         *  CLASSES DE BOTÕES DA COLUNA DE AÇÕES INICIO
         */

        /**
         * @version 1.0 11/09/98
         */

        class ButtonRenderer extends JButton implements TableCellRenderer {

            public ButtonRenderer() {
                setOpaque(true);
            }

            public Component getTableCellRendererComponent(JTable table, Object value,
                                                           boolean isSelected, boolean hasFocus, int row, int column) {
                if (isSelected) {
                    setForeground(table.getSelectionForeground());
                    setBackground(table.getSelectionBackground());
                } else {
                    setForeground(table.getForeground());
                    setBackground(UIManager.getColor("Button.background"));
                }
                setText((value == null) ? "" : value.toString());
                return this;
            }
        }

        /**
         * @version 1.0 11/09/98
         */

        class ButtonEditor extends DefaultCellEditor {
            protected JButton buttonTeste;

            private String labelTeste;

            private int numeroColuna;

            private Historico dadosDaTable = new Historico();

            private boolean isPushed;

            public ButtonEditor(JCheckBox checkBox) {
                super(checkBox);
                buttonTeste = new JButton();
                buttonTeste.setOpaque(true);
                buttonTeste.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        fireEditingStopped();
                    }
                });
            }

            public Component getTableCellEditorComponent(JTable table, Object value,
                                                         boolean isSelected, int row, int column) {
                if (isSelected) {
                    buttonTeste.setForeground(table.getSelectionForeground());
                    buttonTeste.setBackground(table.getSelectionBackground());
                } else {
                    buttonTeste.setForeground(table.getForeground());
                    buttonTeste.setBackground(table.getBackground());
                }

                Historico[] listaAtualizada = historicoDAO.getHistorico().toArray(new Historico[0]);

                //
                dadosDaTable.setIdHistorico(listaAtualizada[row].getIdHistorico());
                dadosDaTable.setIdChave(listaAtualizada[row].getIdChave());
                dadosDaTable.setDataFechamento(listaAtualizada[row].getDataFechamento());

                //
                numeroColuna = column;

                labelTeste = (value == null) ? "" : value.toString();
                buttonTeste.setText(labelTeste);
                isPushed = true;
                return buttonTeste;
            }


            public Object getCellEditorValue() {
                if (isPushed) {

                    // Colocar confirmação nas ações dos botões de devolução e exclusão

                    //Testa se o botão apertado foi da coluna de ações
                    if(numeroColuna == 7) {

                        int opcao = JOptionPane.showOptionDialog(null, "Deseja mesmo devolver essa chave?", "Confirmação",
                                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[] {"Sim","Não"}, null);

                        //Testa se o campo dataFechamento está vazio
                        if (dadosDaTable.getDataFechamento() == null && opcao == 0) {
                            ChaveDAO chaveDAO = new ChaveDAO();

                            chaveDAO.devolverChave(dadosDaTable);

                            Historico[] listaAtualizada = historicoDAO.getHistorico().toArray(new Historico[0]);

                            refresh(jTable1, listaAtualizada);

                        } else if(!dadosDaTable.getDataFechamento().toString().isBlank() && opcao == 0) {
                            JOptionPane.showMessageDialog(null, "A chave já foi devolvida");
                        }
                    }

                    // Se o usuário apertar o botão de DELETE
                    if(numeroColuna == 8){

                        // Confirma se o usuário deseja mesmo fazer a exclusão
                        int opcao = JOptionPane.showOptionDialog(null, "Deseja mesmo excluir essa chave?", "Confirmação",
                                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[] {"Sim","Não"}, null);

                        if(opcao == 0) {
                            historicoDAO.deleteByID(dadosDaTable.getIdHistorico());

                            Historico[] listaPosDelete = historicoDAO.getHistorico().toArray(new Historico[0]);

                            jTable1 = tableConfig(jTable1, listaPosDelete);

                            refresh(jTable1, listaPosDelete);

                            // Botões de atualizar a dataFechamento
                            jTable1.getColumnModel().getColumn(7).setCellRenderer(new ButtonRenderer());
                            jTable1.getColumnModel().getColumn(7).setCellEditor(new ButtonEditor(new JCheckBox()));

                            // Botões de exluir o registro
                            jTable1.getColumnModel().getColumn(8).setCellRenderer(new ButtonRenderer());
                            jTable1.getColumnModel().getColumn(8).setCellEditor(new ButtonEditor(new JCheckBox()));


                        }
                    }
                }
                isPushed = false;
                return new String(labelTeste);
            }

            public boolean stopCellEditing() {
                isPushed = false;
                return super.stopCellEditing();
            }

            protected void fireEditingStopped() {
                super.fireEditingStopped();
            }
        }

        /**
         *  CLASSES DE BOTÕES DA COLUNA DE AÇÕES FIM
         */

        // Botões de atualizar a dataFechamento
        jTable1.getColumnModel().getColumn(7).setCellRenderer(new ButtonRenderer());
        jTable1.getColumnModel().getColumn(7).setCellEditor(new ButtonEditor(new JCheckBox()));

        // Botões de exluir o registro
        jTable1.getColumnModel().getColumn(8).setCellRenderer(new ButtonRenderer());
        jTable1.getColumnModel().getColumn(8).setCellEditor(new ButtonEditor(new JCheckBox()));


        // Pode-se fazer um botão que passe páginas e carregue dados diferentes na table OU Pode-se apenas filtrar o período(mês) e carregar os dados do período(mês)

        // Para fazer os botões de passar as páginas precisa de:
        // um FOR que vai atualizar os dados,
        // de uma variável para armazenar o limite inferior (limite da página anterior),
        // de uma variável para armazenar o limite superior (limite da página presente),
        // logica para incrementar o contador, caso avance a página e decrementar o contador, caso volte a página
        // de uma variável que esteja sempre sendo atualizada quanto aos id que serão setados na table,

        // Se for adicionar um jComboBox como filtro (de períodos ou intervalo de meses que o registro será puxado do banco, exibir o mês filtrado)
        // pega-se o períiodo do jComboBox e chama um método que será criado para puxar os dados do período selecionado,
        // armazena os dados do período selecionado e passa para a table com um FOR


        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 1920, Short.MAX_VALUE)
                                .addContainerGap()
                        )
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                .addGap(16, 16, 16)
                        )
        );

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    /**
     * Método para atualizar os dados da tabela
     * @param jTable
     * @param array
     * @return
     */
    private JTable refresh(JTable jTable, Historico[] array){
        for(int i = 0; i < array.length; i++){
            jTable.setValueAt(array[i].getNumeroChave(), i, 0);
            jTable.setValueAt(array[i].getNome(), i, 1);
            jTable.setValueAt(array[i].getCargo(), i, 2);
            jTable.setValueAt(array[i].getObservacoes(), i, 3);
            jTable.setValueAt(array[i].getStatus(), i, 4);
            jTable.setValueAt(array[i].getDataAbertura(), i, 5);
            jTable.setValueAt(array[i].getDataFechamento(), i, 6);
            jTable.setValueAt("Devolver Chave", i, 7);
            jTable.setValueAt("Excluir", i, 8);
        }
        return jTable;
    }


    /**
     * Método para configurar a tabela
     * @param table
     * @param array
     */
    private JTable tableConfig(JTable table, Historico[] array){
        table = new JTable();

        table.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        table.setModel(new DefaultTableModel(
                new Object[array.length][9],
                new String[]{
                        "Nº da chave", "Nome da pessoa", "Cargo", "Observação", "Status", "Data de abertura", "Data de fechamento", "",""
                }
        ));
        table.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(table);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setRowHeight(50);
        table.getColumnModel().getColumn(0).setPreferredWidth(80);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        table.getColumnModel().getColumn(2).setPreferredWidth(170);
        table.getColumnModel().getColumn(3).setPreferredWidth(575);
        table.getColumnModel().getColumn(4).setPreferredWidth(150);
        table.getColumnModel().getColumn(5).setPreferredWidth(125);
        table.getColumnModel().getColumn(6).setPreferredWidth(125);
        table.getColumnModel().getColumn(7).setPreferredWidth(125);
        table.getColumnModel().getColumn(8).setPreferredWidth(100);

        return table;
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration
}
